var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""}).add({id:1,href:"/docs/prologue/introduction/",title:"Introduction",description:"An introduction to Kubelt",content:"What is Kubelt? # Kubelt is building the web3 cloud — think “next generation Cloudflare” — leveraging peer-to-peer (p2p) protocols and decentralized platforms.\nCurent problems..\n Discuss the choke point in the middle with graphic Discuss how smart contracts are like \u0026ldquo;stored procedures\u0026rdquo; and not great for application logic Discuss the permaweb  Our mission at Kubelt is to disrupt and decentralize the middle-tier by providing developers with a traditional DX in a fully localized context.\nHow does it work? # Kubelt works by providing a local first, full stack developer experience that includes user management, content management, cryptographic utlities and more.\nWith Kubelt, your application metadata is organized into a semantic graph, distrubuted over IPFS and re-materalized into any application context (e.g. browsers, servers, etc) via user centric cyrptophy/wallets.\nAccess and permissioning to this data is goverened by an end-user cryptography and deterministacally defrenced through what we call \u0026ldquo;Kubelt Cores\u0026rdquo;\nRead our whitepaper to learn more.\nUser Centric and Local First # Get instructions on how to accomplish common tasks with Doks. Recipes →\nDecentralized Content Delivery # Learn how to customize Doks to fully make it your own. Reference Guides →\nKubelt Cores # A Kubelt Core is made up of two parts. The @scope which represents a user, organization, or use case that governs a namespace or collection of content. A core will always be represented as @\u0026lt;scope\u0026gt;/\u0026lt;namespace\u0026gt; within this documentation.\nScopes # Namespaces # Learn how to customize Doks to fully make it your own. Reference Guides →\nUse Cases # Showcase # See what others have build with Doks. Showcase →\nContributing # Find out how to contribute to Doks. Contributing →\nResources #  Cores SDK Reference Cores API Reference  "}).add({id:2,href:"/docs/prologue/quick-start/",title:"Quick Start",description:"One page summary of how to start a new Doks project.",content:"Requirements #  Git — latest source release Node.js — latest LTS version or newer  👉  The Tutorial is intended for novice to intermediate users.    Why Node.js? Doks uses npm (included with Node.js) to centralize dependency management, making it easy to update resources, build tooling, plugins, and build scripts. Start a new Doks project # Create a new site, change directories, install dependencies, and start development server.\nCreate a new site # Doks is available as a child theme and a starter theme.\nChild theme #  Intended for novice to intermediate users Intended for minor customizations Easily update npm packages — including Doks  git clone https://github.com/h-enk/doks-child-theme.git my-doks-site  Starter theme #  Intended for intermediate to advanced users Intended for major customizations Easily update npm packages  git clone https://github.com/h-enk/doks.git my-doks-site   Help me choose Not sure which one is for you? Pick the child theme. Change directories # cd my-doks-site  Install dependencies # npm install  Start development server # npm run start  Doks will start the Hugo development webserver accessible by default at http://localhost:1313. Saved changes will live reload in the browser.\nOther commands # Doks comes with commands for common tasks. Commands →\n"}).add({id:3,href:"/docs/prologue/contributing/",title:"Contributing",description:"One page summary of how to start a new Doks project.",content:"Requirements #  Git — latest source release Node.js — latest LTS version or newer  👉  The Tutorial is intended for novice to intermediate users.    Why Node.js? Doks uses npm (included with Node.js) to centralize dependency management, making it easy to update resources, build tooling, plugins, and build scripts. Start a new Doks project # Create a new site, change directories, install dependencies, and start development server.\nCreate a new site # Doks is available as a child theme and a starter theme.\nChild theme #  Intended for novice to intermediate users Intended for minor customizations Easily update npm packages — including Doks  git clone https://github.com/h-enk/doks-child-theme.git my-doks-site  Starter theme #  Intended for intermediate to advanced users Intended for major customizations Easily update npm packages  git clone https://github.com/h-enk/doks.git my-doks-site   Help me choose Not sure which one is for you? Pick the child theme. Change directories # cd my-doks-site  Install dependencies # npm install  Start development server # npm run start  Doks will start the Hugo development webserver accessible by default at http://localhost:1313. Saved changes will live reload in the browser.\nOther commands # Doks comes with commands for common tasks. Commands →\n"}).add({id:4,href:"/docs/guides/nft/",title:"Dynamic NFT content mangement",description:"",content:""}).add({id:5,href:"/docs/guides/dapp/",title:"Kubelt powered dapp",description:"",content:""}).add({id:6,href:"/docs/tutorials/tutorial1/",title:"Tutorial1",description:"",content:""}).add({id:7,href:"/docs/references/",title:"References",description:"",content:""}).add({id:8,href:"/docs/references/js/",title:"Kubelt JS",description:"JavaScript API Reference",content:"Intro # This reference documents every object and method available in Stripe\u0026rsquo;s JavaScript library, kbt.js. Take a look at our Kubelt dApp or Kubelt Sanity Plugin packages as a reference for how to use this library.\nLooking for a step-by-step guide? # Learn to setup Dynamic NFT Content and Kubelt dApp guides.\nNot a developer? # Try our Kubelt Sanity Plugin instead.\n Installation # npm install --save @kubelt/kubelt-js OR yarn install --save @kubelt/kubelt-js  Or use our CDN\n\u0026lt;script src=\u0026quot;https://js.kubelt.com/alpha\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  Including # ES Next import { v1 as Kubelt, v1.core as KubeltCore, v1.core.content as KubeltContent } from 'kubelt-js'   Common JS const Kubelt = require('kubelt-js').v1 const KubeltCore = require('kubelt').v1.core const KubeltContent = require('kubelt').v1.core.content   Initialization # Kubelt.init(config?) # Use Kubelt.init(config?) to create an instance of the Kubelt object. The Kubelt object is your entrypoint to the rest of the Kubelt JS SDK.\nTODO: note on the functional pattern of the SDK\nMethod parameters #    name type data type description     options optional object Kubelt SDK configuration options   options.p2p optional object Node configuration options   options.p2p.read optional string Multiaddress for read operations   options.p2p.write optional string Multiaddress for write operations   options.wallet optional string Kubelt Wallet object   options.logging optional enum Log level setting    Example # const kbt = Kubelt.init({ p2p: { read: \u0026quot;/ip4/127.0.0.1/tcp/9061\u0026quot;, write: \u0026quot;/dns/api.kubelt.com\u0026quot; }, wallet: wallet, logging: Kubelt.logging.INFO }  TODO: some kind of multiaddress for cores?\n⚠️  NOTE: Kubelt currently only supports p2p.write operations through API gateway.    Kubelt Cores # Requests made by the Kubelt JS SDK will be made to the dns addresses configured in the p2p options object during the initilziation process. The hostname of the DNS address represents the Kubelt Core scope.\nFor instance, requests made to api.kubelt.com/@alice/ will be routed to the @alice core with identity asserations made by the requester via JWT. The general pattern with scope is:\nhttps://\u0026lt;api.kubelt.com | CNAME\u0026gt;/@{core}/\u0026lt;some/standard/core/endpoint\u0026gt; -H \u0026quot;kbt-identity-assertion-token: JWT\u0026quot;  In doing so, cores can be organized by user, organization, application and/or any other use case.\n👉  Kubelt allows CNAME configurations to help dApps access the network.   For more, see Cores API →\n The Wallet object # Kubelt uses a wallet object to that represent the current selected core and a reference to signing and decryption functions. This allows the developer to use they library of their choice (e.g. web3.js or ethers.js) as well as select an RPC signer or in memoery wallet (e.g. web3.eth.personal or web.eth.accounts).\nProperties #    name type data type description     address required string Selected wallet account address   sign-func required function Wallet provider signing function   type optional enum Kubelt wallet type. Default \u0026ldquo;Metamask\u0026rdquo;   encrypt-key optional string Encryption key for selected account   decrypt-func optional function Wallet proider decryption function    Kubelt.wallet.set(kbt, wallet) # The Kubelt JS SDK requires a wallet (aka a signer) to be set provided to perform spcific actions like authentication.\nTODO: note on how wallet state is managed\nMethod Properties #    name type data type description     kbt required string An instance of the Kubelt SDK   wallet required string The Wallet object    Returns #    name data type description     sdk object Updated instance of the Kubelt SDK with wallet    let kubeltWallet = null ethereum.on('accountsChanged', handler: (accounts) =\u0026gt; { const signFunc = async (msg) =\u0026gt; { return await web3.eth.sign(msg, accounts[0]) } kubeltWallet = { address: accounts[0], sign_func: signFunc } sdk = Kubelt.wallet.set(kbt, wallet) });   Core API # authenticate(kbt, core) # Use KubeltCore.authenticate to perform a zero-knowledge proof to authenticate against the Kubelt peer-to-peer network.\nThe authentication method will request a nonce from the selected core, as indicated by their wallet object, for the client to sign and return. In doing so, the selected core will validate the proof and issue a signed JWT token representing the user\u0026rsquo;s authoirzation to and identity to the core for subsequent requests.\n👉  The selected core and entrypoint for when first authenticating is typically a core configured for the user's wallet adress.   Method Properties #    name type data type description     kbt required string An instance of the Kubelt SDK   core optional string Kubelt Core name (defaults to wallet address)    Returns #    name data type description     kbt object Updated instance of the Kubelt SDK with wallet    Example # kbt = await KubeltCore.authenticate(kbt, \u0026quot;alice.org\u0026quot;);  describe(kbt, core) # Use KubeltCore.describe to introspect a core and it\u0026rsquo;s config.\nMethod Properties #    name type data type description     kbt required string An instance of the Kubelt SDK   core optional string Kubelt Core name (defaults to wallet address)    Returns #    name data type description     core object An instance of a core object    Example # const core = await KubeltCore.describe(sdk, \u0026quot;alice.org\u0026quot;);  permission(kbt, core, signer) # Use KubeltCore.permission to add a signer to a core with role/permissions.\nTODO: definition\nrevoke(kbt, core, signer) # addCore(kbt, core) # Content API # publish(kbt, core, content, name, metadata) # "}).add({id:9,href:"/docs/references/api/",title:"Cores API",description:"Definitions # JWT #  TODO    TODO: cores config object (includes things like \u0026ldquo;inherit\u0026rdquo; billing from authoring core) TODO: cores object  Metadata #  TODO   Requests # NOTE: Cores will need middleware to do internal authentication/authorization.\nAuth #  POST /@{core}/auth (start a zk-auth flow) The auth request will route and kick off a proof to the core. If no core exists, one will be created and bootstrapped with default configs, EDSCA keys and the signer as the owner.",content:"Definitions # JWT #  TODO    TODO: cores config object (includes things like \u0026ldquo;inherit\u0026rdquo; billing from authoring core) TODO: cores object  Metadata #  TODO   Requests # NOTE: Cores will need middleware to do internal authentication/authorization.\nAuth #  POST /@{core}/auth (start a zk-auth flow) The auth request will route and kick off a proof to the core. If no core exists, one will be created and bootstrapped with default configs, EDSCA keys and the signer as the owner.\nParameters #     name type  description     core required string name of core (e.g. account address, organization, namespace)   signer required string wallet account address     Responses #     code content-type response     201 application/json {\u0026quot;nonce\u0026quot;: \u0026quot;\u0026lt;nonce\u0026gt;\u0026quot;}   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X POST -H \u0026quot;Content-Type: application/json\u0026quot; --data @post.json http://api.kubelt.com/alice/auth     POST /@{core}/verify (complete zk-auth flow) The verify request will reproduce the signer from the auth step to verify the signer and nonce match before issuing a self signed JWT from the core.\nParameters #     name type  description     core required string name of core (e.g. wallet account address)   signed_nonce required string signed nonce     Responses #     code content-type response     201 application/json Signed JSON Web Token with user root address   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X POST -H \u0026quot;Content-Type: application/json\u0026quot; --data @post.json http://api.kubelt.com/alice/verify    Configuration #  GET /@{core} (get a core) This request will request the @{core} configuration.\nRequires JWT authentication into @{core}.\nParameters #     name type  description     {core} required string the entry core (e.g. wallet address)     Responses #     http code content-type response     201 application/json {\u0026hellip;core config}   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X GET -H \u0026quot;Content-Type: application/json\u0026quot; http://\u0026lt;cname or content.kubelt.com\u0026gt;/@alice     PUT /@{core} (update a core) This request will update the @{core} configuration.\nRequires JWT authentication into @{core}.\nParameters #     name type  description     {core} required string the entry core (e.g. wallet address)   config required object configuration for {new core}   signature required string signed configuration     Responses #     http code content-type response     200 application/json Core Updated.   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X GET -H \u0026quot;Content-Type: application/json\u0026quot; http://\u0026lt;cname or content.kubelt.com\u0026gt;/@alice     POST /@{core}/@{new_core} (create a core) This request will create a @{new_core} on behalf the the @{core} for a namspaced storage, cryptography, permissions, and billing.\nRequires JWT authentication into @{core}.\nParameters #     name type  description     {core} required string the entry core (e.g. wallet address)   {new_core} required string the name of the core to create based on the hash of the (core + new core name)   config required object configuration for {new core}   signature required string signed configuration     Responses #     http code content-type response     201 application/json Core Created.   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X GET -H \u0026quot;Content-Type: application/json\u0026quot; http://\u0026lt;cname or content.kubelt.com\u0026gt;/@alice/@acme.org     GET /@{core}/cores (fetch available cores) This request will ask the @{core} for a list of other cores this core manages.\nRequires JWT authentication.\nParameters #     name type  description     core required string the content core (e.g. user account id)     Responses #     code content-type response     200 application/json {\u0026quot;cores\u0026quot;: [...cores]   401 application/json {\u0026quot;code\u0026quot;:\u0026quot;401\u0026quot;,\u0026quot;message\u0026quot;: \u0026quot;Content Not Found\u0026quot;}   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X GET -H \u0026quot;Content-Type: application/json\u0026quot; http://\u0026lt;cname or content.kubelt.com\u0026gt;/alice/cores    Content #  GET /@{core}/content/{name} (fetch CID for name address) Parameters #     name type data type description     core required string the content core   address required string the name hash for the managed content     Responses #     http code content-type response     200 application/json {\u0026quot;cid\u0026quot;: \u0026quot;\u0026lt;IPFS CID\u0026gt;\u0026quot;, \u0026quot;metadata\u0026quot;: \u0026quot;\u0026lt;metadata\u0026gt;\u0026quot;}   401 application/json {\u0026quot;code\u0026quot;:\u0026quot;401\u0026quot;,\u0026quot;message\u0026quot;: \u0026quot;Content Not Found\u0026quot;}   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X GET -H \u0026quot;Content-Type: application/json\u0026quot; http://\u0026lt;cname or content.kubelt.com\u0026gt;/crt/bb48bdae67206a493787b69821008fcd6249d013125972db3660e75ab6f3c884     GET /@{core}/content/dref/{seed} (fetch CID for content using known seed) Parameters #     name type data type description     core required string the content core   seed required string the seed for the kubelt name hash     Responses #     http code content-type response     200 application/json {\u0026quot;cid\u0026quot;: \u0026quot;\u0026lt;IPFS CID\u0026gt;\u0026quot;, \u0026quot;metadata\u0026quot;: \u0026quot;\u0026lt;metadata\u0026gt;\u0026quot;}   401 application/json {\u0026quot;code\u0026quot;:\u0026quot;401\u0026quot;,\u0026quot;message\u0026quot;: \u0026quot;Content Not Found\u0026quot;}   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X GET -H \u0026quot;Content-Type: application/json\u0026quot; http://\u0026lt;cname or content.kubelt.com\u0026gt;/crt/:dref/charizard     POST /@{core}/content (add content) Requires JWT authentication into @{core}\nParameters #     name type data type description     core required string the content core   seed required string the seed for the kubelt name hash     Responses #     http code content-type response     200 application/json {\u0026quot;cid\u0026quot;: \u0026quot;\u0026lt;IPFS CID\u0026gt;\u0026quot;, \u0026quot;metadata\u0026quot;: \u0026quot;\u0026lt;metadata\u0026gt;\u0026quot;}   401 application/json {\u0026quot;code\u0026quot;:\u0026quot;401\u0026quot;,\u0026quot;message\u0026quot;: \u0026quot;Content Not Found\u0026quot;}   400 application/json {\u0026quot;code\u0026quot;:\u0026quot;400\u0026quot;,\u0026quot;message\u0026quot;:\u0026quot;Bad Request\u0026quot;}     Example cURL #  curl -X GET -H \u0026quot;Content-Type: application/json\u0026quot; http://\u0026lt;cname or content.kubelt.com\u0026gt;/crt/:dref/charizard    "}).add({id:10,href:"/docs/references/cli/",title:"KBT CLI",description:"Doks comes with commands for common tasks.",content:"💡  You can change the commands in the scripts section of `./package.json`.   create # Create new content for your site:\nnpm run create [path] [flags]  See also the Hugo docs: hugo new.\nDocs based tree # Create a docs based tree — with a single command:\nnpm run create -- --kind docs [section]  For example, create a docs based tree named guides:\nnpm run create -- --kind docs guides  lint # Check scripts, styles, and markdown for errors:\nnpm run lint  scripts # Check scripts for errors:\nnpm run lint:scripts [-- --fix]  styles # Check styles for errors:\nnpm run lint:styles [-- --fix]  markdown # Check markdown for errors:\nnpm run lint:markdown [-- --fix]  clean # Delete temporary directories:\nnpm run clean  start # Start local development server:\nnpm run start  build # Build production website:\nnpm run build  functions # Build Lambda functions:\nnpm run build:functions  preview # Build production website including draft and future content:\nnpm run build:preview  "}).add({id:11,href:"/docs/references/github-action/",title:"Github Action",description:"Please visit the GHA Repo →",content:"Please visit the GHA Repo →\n"}).add({id:12,href:"/docs/references/literate/",title:"Literate",description:"Please visit the literate documentation →",content:"Please visit the literate documentation →\n"}).add({id:13,href:"/docs/tutorials/",title:"Tutorials",description:"",content:""}).add({id:14,href:"/docs/guides/",title:"Guides",description:"",content:""}).add({id:15,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:"Problems updating npm packages # Delete the ./node_modules folder, and run again:\nnpm install  Problems with cache # Delete the temporary directories:\nnpm run clean  "}).add({id:16,href:"/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}).add({id:17,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:"Hyas? # Doks is a Hyas theme build by the creator of Hyas.\nFooter notice? # Please keep it in place.\nKeyboard shortcuts for search? #  focus: Ctrl + / select: ↓ and ↑ open: Enter close: Esc  Other documentation? #  Netlify Hugo  Can I get support? # Create a topic:\n Netlify Community Hugo Forums Doks Discussions  Contact the creator? # Send h-enk a message:\n Netlify Community Hugo Forums Doks Discussions  "}).add({id:18,href:"/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:"💡  Learn more about semantic versioning and advanced range syntax.   Check for outdated packages # The npm outdated command will check the registry to see if any (or, specific) installed packages are currently outdated:\nnpm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...]  Update packages # The npm update command will update all the packages listed to the latest version (specified by the tag config), respecting semver:\nnpm update [\u0026lt;pkg\u0026gt;...]  "}).add({id:19,href:"/docs/",title:"Kubelt Docs",description:"TODO # ",content:"TODO # "}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()